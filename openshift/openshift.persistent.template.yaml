apiVersion: v1
items:
- apiVersion: v1
  kind: Template
  metadata:
    name: mongodb-node-repset-persistent
    annotations:
      description: Deploy a MongoDB RepSet Node
  labels:
    template: mongodb-node-repset-persistent
    app: mongodb-node-repset-persistent

  parameters:
  - name: APPLICATION_NAME
    required: true
    description: Application name
  - name: PERSISTENT_VOLUME_CLAIM
    required: true
    description: Persistent Volume Claim
  - name: MONGODB_REP_SET
    required: true
    description: Replica set name
  - name: MONGODB_KEY_REP_SET
    required: true
    description: KEY for RepSet authentication (generated with openssl rand -base64 741 and remove spaces)
  - name: MONGODB_ROLE
    required: true
    description: primary / secondary - if primary, create root user and run rs.initiate(conf)
  - name: MONGODB_ROOT_USER
    description: if primary, create MONGO_ROOT_USER
  - name: MONGODB_ROOT_PASSWORD
    description: if primary, create MONGO_ROOT_USER with MONGO_ROOT_PASSWORD
  - name: MONGODB_CONF_REPSET
    description: if primary, run rs.initiate(MONGO_CONF_REPSET)
  - name: MONGOD_AUTH
    description: yes / no - run mongod with --auth
  - name: MONGOD_VERBOSE
    description: yes / no - run mongod with --verbose

  objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}

  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Docker
        dockerStrategy: {}
      source:
        type: Git
        git:
          uri: "https://github.com/bappr/mongo-rep-set"
          ref: "master"
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 9000
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            deploymentconfig: ${APPLICATION_NAME}
            application: ${APPLICATION_NAME}
        spec:
          volumes:
            -
              name: ${APPLICATION_NAME}-volume-1
              persistentVolumeClaim:
                claimName: ${PERSISTENT_VOLUME_CLAIM}
            -
              name: ${APPLICATION_NAME}-volume-2
              persistentVolumeClaim:
                claimName: ${PERSISTENT_VOLUME_CLAIM}
          containers:
          - name: ${APPLICATION_NAME}
            image: ${APPLICATION_NAME}:latest
            env:
              - name: REP_SET
                value: ${MONGODB_REP_SET}
              - name: KEY_REP_SET
                value: ${MONGODB_KEY_REP_SET}
              - name: MONGO_ROLE
                value: ${MONGODB_ROLE}
              - name: MONGO_ROOT_USER
                value: ${MONGODB_ROOT_USER}
              - name: MONGO_ROOT_PASSWORD
                value: ${MONGODB_ROOT_PASSWORD}
              - name: MONGO_CONF_REPSET
                value: ${MONGODB_CONF_REPSET}
              - name: AUTH
                value: ${MONGOD_AUTH}
              - name: VERBOSE
                value: ${MONGOD_VERBOSE}
            volumeMounts:
              - name: ${APPLICATION_NAME}-volume-1
                mountPath: /data/configdb
              - name: ${APPLICATION_NAME}-volume-2
                mountPath: /data/db

      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
          containerNames:
          - ${APPLICATION_NAME}

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
        application: ${APPLICATION_NAME}
    spec:
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      ports:
      - name: 27017-tcp
        port: 27017
        protocol: TCP
      targetPort: 27017

kind: List
metadata: {}